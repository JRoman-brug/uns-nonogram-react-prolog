:- module(
    init, 
    [ init/3, init10x10/3, init10x10Ladder/3, init3x5/3, init5x3/3,initDone/3, initZero/3,initAllZero/3, initClueTest/3, initAmbiguo/3, init10x10Complete/3]
).

/**
 * init(-RowsClues, -ColsClues, Grid).
 * Predicate specifying the initial grid, which will be shown at the beginning of the game,
 * including the rows and columns clues.
 */

init(
    [[1,1],[2],[2],[1,1]],% RowsClues
    [[1,1],[2],[2],[1,1]], 	% ColsClues

    [
        [ _, _, _, _],
        [ _, _, _, _],
        [ _, _, _, _],
        [ _, _, _, _]
    ]
).

initZero(
    [[1],[2],[2],[0]],% RowsClues
    [[1],[2],[2],[0]], 	% ColsClues
    [
        [ _, _, _, _],
        [ _, _, _, _],
        [ _, _, _, _],
        [ _, _, _, _]
    ]
).

initAllZero(
    [[0],[0],[0],[0]],% RowsClues
    [[0],[0],[0],[0]], 	% ColsClues
    [
        [ _, _, _, _],
        [ _, _, _, _],
        [ _, _, _, _],
        [ _, _, _, _]
    ]
).

initDone(
    [[1,1],[2],[2],[1,1]],% RowsClues
    [[1,1],[2],[2],[1,1]], 	% ColsClues

    [
        [ "#", _, _, "#"],
        [ _, "#", "#", _],
        [ _, "#", "#", _],
        [ "#", _, _, "#"]
    ]
).

init10x10Complete(
    [[10],[10],[10],[10],[10],[10],[10],[10],[10],[10]], %RowsClues
    [[10],[10],[10],[10],[10],[10],[10],[10],[10],[10]], %ColsClues
    [
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _]
    ]
).

init10x10Ladder(
    [[10],[9],[8],[7],[6],[5],[4],[3],[2],[1]], % RowsClues
    [[10],[9],[8],[7],[6],[5],[4],[3],[2],[1]], %ColsClues
    [
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _]
    ]
).

init10x10(
    [[3,3,1],[2,1,2,2],[1,1,2,1],[1,8],[1,1,1,4],[1,1,5],[1,3,1],[1,3,1],[1,4],[2,5]],% RowsClues
    [[2,3,1],[3,2],[1,5],[3],[1,2],[4,3,1],[10],[7],[2,3,2],[9]],%ColsClues
    [
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _]
    ]
).

init3x5(
    [[3],[3],[3],[3],[3]], % RowsClues
    [[5],[5],[5]], 	% ColsClues 
    [
        [ _, _, _],
        [ _, _, _],
        [ _, _, _],
        [ _, _, _],
        [ _, _, _]
    ]
).

init5x3(
    [[5],[5],[5]], % RowsClues
    [[3],[3],[3],[3],[3]], 	% ColsClues
    [
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _]
    ]
).

initClueTest(
    [[1,1,1],[5],[3],[3],[3]],% RowsClues
    [[3],[3],[5],[1,2],[2,1]],% ColsClues
    [
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _]
    ]
).

initAmbiguo(
    [[1],[1],[1],[1],[1]],% RowsClues
    [[1],[1],[1],[1],[1]],% ColsClues
    [
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _],
        [ _, _, _, _, _]
    ]
).


init10x102(
    [[2,3],[5,1],[6,2],[7,3],[2,1,5],[1,2,6],[1,2,6],[7,2],[7],[5,2,1],[4,1],[3,2,1,2],[2,5,1],[6,2],[3,1,1]],%RowClues
    [[10,1,1],[4,4,1,1],[3,5,2],[4,7],[4,4,3],[7,2],[1,1,3,4],[1,1,3],[2],[1,2],[3],[5,1],[5],[5,1,1],[4,6]],% ColsClues
    [
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
    ]
).
